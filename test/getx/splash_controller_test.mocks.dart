// Mocks generated by Mockito 5.0.16 from annotations
// in cleanarchitechgetx/test/getx/splash_controller_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:cleanarchitechgetx/domain/models/product.dart' as _i7;
import 'package:cleanarchitechgetx/domain/models/user.dart' as _i2;
import 'package:cleanarchitechgetx/domain/request/login_request.dart' as _i6;
import 'package:cleanarchitechgetx/domain/response/login_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

import '../mocks/api_repository_mock.dart' as _i4;
import '../mocks/local_repository_mock.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUser_0 extends _i1.Fake implements _i2.User {}

class _FakeLoginResponse_1 extends _i1.Fake implements _i3.LoginResponse {}

/// A class which mocks [ApiRepositoryMock].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiRepositoryMock extends _i1.Mock implements _i4.ApiRepositoryMock {
  MockApiRepositoryMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i5.Future<_i2.User> getUserFromToeken(String? token) =>
      (super.noSuchMethod(Invocation.method(#getUserFromToeken, [token]),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i5.Future<_i2.User>);
  @override
  _i5.Future<_i3.LoginResponse> login(_i6.LoginRequest? loginRequest) =>
      (super.noSuchMethod(Invocation.method(#login, [loginRequest]),
              returnValue:
                  Future<_i3.LoginResponse>.value(_FakeLoginResponse_1()))
          as _i5.Future<_i3.LoginResponse>);
  @override
  _i5.Future<void> logout(String? token) =>
      (super.noSuchMethod(Invocation.method(#logout, [token]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<_i7.Product>> getProducts() =>
      (super.noSuchMethod(Invocation.method(#getProducts, []),
              returnValue: Future<List<_i7.Product>>.value(<_i7.Product>[]))
          as _i5.Future<List<_i7.Product>>);
}

/// A class which mocks [LocalRepositoryMock].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalRepositoryMock extends _i1.Mock
    implements _i8.LocalRepositoryMock {
  MockLocalRepositoryMock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String toString() => super.toString();
  @override
  _i5.Future<String?> getToken() =>
      (super.noSuchMethod(Invocation.method(#getToken, []),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<String> saveToken(String? token) =>
      (super.noSuchMethod(Invocation.method(#saveToken, [token]),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<void> clearAllData() =>
      (super.noSuchMethod(Invocation.method(#clearAllData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<_i2.User> getUser() =>
      (super.noSuchMethod(Invocation.method(#getUser, []),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i5.Future<_i2.User>);
  @override
  _i5.Future<_i2.User> saveUser(_i2.User? user) =>
      (super.noSuchMethod(Invocation.method(#saveUser, [user]),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i5.Future<_i2.User>);
  @override
  _i5.Future<void> saveDarkMode(bool? isDarkMode) =>
      (super.noSuchMethod(Invocation.method(#saveDarkMode, [isDarkMode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<bool?> isDarkMode() =>
      (super.noSuchMethod(Invocation.method(#isDarkMode, []),
          returnValue: Future<bool?>.value()) as _i5.Future<bool?>);
}
